#!/usr/bin/perl

=pod =======================================================

=head1 SYNOPSIS

MODULE NAME: nginx-cfg 

DESCRIPTION: Idempotent template-based Nginx configuration control

NOTES: 

AUTHOR: Troy Conrad, LBOX LLC. troy.conrad@lbox.com

=cut =======================================================

package LBOX::NginxCfg;

our $SCRIPT_NAME = 'nginx-cfg';

our $VERSION = '0.2.2';

#use feature qw(say switch unicode_strings);
use feature qw(say switch);
use Getopt::Std;
use Template;
use Term::ANSIColor qw(:constants);
use File::Copy;
#use Net::Ping;
use strict 'vars';

#binmode(STDOUT, ":utf8"); # suppresses UTF-related warnings

######### CONFIGURATION #########

our $CONFIG_FILE = '/opt/nginx-cfg/config.pl';

######### MAIN PROGRAM #########

our($NGINX_CONFIG_DIR,$TEMPLATES_DIR,$RETAINED_BACKUPS_CNT,$TEXT_EDITOR,$COMMON_CONFIG);

my %opts = ();

getopts('a:c:de:l:r:st:u:hnv:V', \%opts); # process command line switches into $opts{*} vars

our $VERBOSITY = $opts{v} ||= 1;

if ($opts{V}) { say "$SCRIPT_NAME version $VERSION"; exit; }

-f $CONFIG_FILE or fail("Sorry, the required config at '$CONFIG_FILE' can't be read.");

our $UPDATE_NGINX = $opts{d} ||= $opts{n};

require $CONFIG_FILE;

my ($proxy_pass_url,$vhost);

my $template_file = $opts{t};

my $comment = $opts{c};

$TEXT_EDITOR ||= 'nano';

if ($opts{a})
{
	$vhost = $opts{a};
	if ($opts{u})
	{
		$proxy_pass_url = $opts{u};
	}
	else
	{
		say "You must specify an upstream/redirect URL with -u when using the -a (add) option.";
		$opts{h}++;
	}
}
elsif ($opts{e}) { $vhost = $opts{e}; }
elsif ($opts{l}) { $vhost = $opts{l}; }
elsif ($opts{r}) { $vhost = $opts{r}; }
else
{
	say "You must specify -a (add), -l (list) or -r (remove).";
	$opts{h}++;
}

if ($opts{h})
{
	print <<EOS;
$SCRIPT_NAME version $VERSION

Add, list and remove Nginx site configuration files.

Usage:

$SCRIPT_NAME [-a|-e|-l|-r <site-name>] [-c comment] [-u <upstream/redirect/S3-bucket URL>] [-t <config-template>] [-d/n] [-v <1-4>]

Options:

  -a <site-name>        Add a configuration for the site named 'site-name'.
                        If the configuration already exists, update it.

  -c <comment>          Optional comment string to add to top of configuration file.

  -h                    Show this Help screen and exit.

  -l                    List ALL active sites.
  -l <site-name>        List the configuration file contents for the site named 'site-name'.

  -e <site-name>        Edit the configuration for the site named 'site-name'. 

  -E <Editor-name>      Specify a valid installed text editor for use with -e edit option.
                        Default is '$TEXT_EDITOR'.

  -d/-n                 Do Not update the running Nginx configuration after using -a, -e or -r.

  -r <site-name>        Remove the configuration for the site named 'site-name'.

  -t <config-template>  Optional configuration Template to use when adding/updating a site.
                        Stored in '$TEMPLATES_DIR'.
                        Default is the 'default' template.

  -u <URL>  		    The URL to proxy or redirect to (depending on template used.)
                        Required when using the -a option.

  -v <0-4>              Specify the verbosity of console output, higher numbers are more verbose.
                        Default is 1.

  -V                    Show Version info and exit.

Examples:

- Add/update configuration for 'some.example.com', proxying traffic to local port 8000:

	$SCRIPT_NAME -a some.example.com -u http://localhost:8000

- Add/update configuration for 'another.example.com', proxied to URL 'http://anotherhost',
  using the 'ssl-redirect' template (which forces browser to use SSL):

	$SCRIPT_NAME -a another.example.com -u http://anotherhost:8080 -t ssl-redirect

- Add/update configuration for 'mail.example.com', which redirects to URL 'https://mail.google.com'.

	$SCRIPT_NAME -a mail.example.com -u https://mail.google.com -t 301-redirect

- List configuration for 'some.example.com':

	$SCRIPT_NAME -l some.example.com:

- Remove configuration file for 'another.example.com' but don't reload Nginx.

	$SCRIPT_NAME -r another.example.com -n
EOS

# To implement:
#
#   -l /<regex-pattern>/  List any active configuration files matching regex pattern /<regex-pattern>/.
#   -s                    Show what would be done ONLY, without making any changes.

	exit;
}

logger("$SCRIPT_NAME version $VERSION started.");

if ($vhost) { $vhost =~ m/\w+\.\w+/ || fail("'$vhost' is not a valid fully qualified domain name."); }
else		{ fail("Please specifiy a fully qualified domain name (FQDN) to process."); }

if ($opts{a})
{
	logger("Adding site '$vhost'... ");
	addDomain($vhost,$template_file,$proxy_pass_url,$comment) || fail("Configuration failed.");
	logger(2,GREEN . 'OK' . RESET);
	updateNginx();
}

if ($opts{l})
{
	logger("Listing site '$vhost'... ");
	listDomain($vhost) || fail("Listing failed.");
	logger(2,GREEN . 'OK' . RESET);
}

if ($opts{e})
{
	logger("Editing site '$vhost'... ");
	editDomain($vhost) || fail("Edit failed.");
	logger(2,GREEN . 'OK' . RESET);
	updateNginx();
}

if ($opts{r})
{
	logger("Removing site '$vhost'... ");
	removeDomain($vhost) || fail("Configuration failed.");
	logger(2,GREEN . 'OK' . RESET);
	updateNginx();
}

######### CORE FUNCTIONS #########

sub addDomain
{
	my ($domain_name,$template_name,$proxy_pass_url,$comment) = @_;

	my $filename = $domain_name;
	$filename =~ tr'.'_';

 	$template_name ||= 'default';
	$template_name .= '.tt2' unless $template_name =~ /\.tt2$/; # append extention if needed

	logger(3,"Adding $domain_name using $template_name...");

	my $template_file = "$TEMPLATES_DIR/$template_name";

	-f $template_file or fail(
			"Sorry, I can't find the required '$template_file' file!\n" .
			"Please make sure it's in '$TEMPLATES_DIR'. Valid options are:\n" .
			`ls -1 $TEMPLATES_DIR` . "\n"
		);

	my $nginx_available_dir = "$NGINX_CONFIG_DIR/sites-available";
	my $nginx_enabled_dir	= "$NGINX_CONFIG_DIR/sites-enabled";

	my $dest_file = "$nginx_available_dir/${filename}_" . getCurrentDateTimeString() . ".conf";

	if (-e $dest_file)
	{
		unlink($dest_file) || die "Could not delete '$dest_file': $!\n";
	}

	my $t_config = {
		ABSOLUTE	=> 1,
		POST_CHOMP	=> 1 # cleanup whitespace
	};
	
	# create Template object
	my $template = Template->new($t_config);

	$comment ||= $domain_name;

	# define template variables for replacement
	my $t_vars = {
	    filename		=> $dest_file,
	    comment			=> $comment,
	    server_name		=> $domain_name,
	    proxy_pass_url	=> $proxy_pass_url,
	    common_config	=> $COMMON_CONFIG
	 };

	logger(3,"Creating $dest_file...");

	$template->process($template_file, $t_vars, $dest_file)
		|| die $template->error(), "\n";

	my $dest_link = "$nginx_enabled_dir/$filename.conf";

	if (-e $dest_link)
	{
		unlink($dest_link) || die "Could not delete '$dest_link': $!\n";
	}

	logger(3,"Linking $dest_link to $dest_file...");

	symlink($dest_file,$dest_link);

	return 1;
}

#

sub listDomain
{
	my $domain = shift;

	if ($domain)
	{
		my $nginx_filename = getConfigFilename($domain);
		logger("Showing '$nginx_filename':\n" . `cat $nginx_filename`);
	}
	else
	{
		my $enabled_dir = "$NGINX_CONFIG_DIR/sites-enabled";
		logger("Showing all active configuration files in '$enabled_dir':\n" . `ls -1 $enabled_dir`);

	}

	return 1;
}

#

sub editDomain
{
	my $nginx_filename = getConfigFilename(@_);

	if (`which $TEXT_EDITOR`)
	{
		logger("Editing '$nginx_filename'...");
		exec "$TEXT_EDITOR $nginx_filename";
	}
	else
	{
		say "Please specify a valid installed text editor with '-E' option or in '$CONFIG_FILE'.";
		return;
	}

	return 1;

}

#

sub removeDomain
{
	$_ = shift;
	tr'.'_';
	s'.conf'';

	my $filename = "$NGINX_CONFIG_DIR/sites-enabled/$_.conf";

	unlink($filename) || die "Could not delete '$filename': $!\n";

	return 1;
}

#

sub getConfigFilename
{
	$_ = shift;
	tr'.'_';
	s'.conf'';

	#my $filename = "$NGINX_CONFIG_DIR/sites-available/$_.conf";
	#return $filename if -f $filename;

	my $filename = "$NGINX_CONFIG_DIR/sites-enabled/$_.conf";
	return $filename if -f $filename;
	
	fail("There is no $_ config at $filename");
}

#

sub updateNginx
{

	logger("Verifying Nginx configuration...");
	my $testResult = `sudo nginx -t 2>&1`;
	logger(3,"Test Result: $testResult");

	if ($testResult =~ /test is successful/)
	{
		logger(2,GREEN . 'OK' . RESET);
		my $reload_cmd = "sudo service nginx reload";
		if ($UPDATE_NGINX)
		{
			logger("Dry run mode enabled, run '$reload_cmd' to reload Nginx.");
		}
		else
		{
			logger('Reloading Nginx...');
			`$reload_cmd`;
		}
	}
	else
	{
		fail("Sorry, Nginx configuration test FAILED:\n$testResult\nNginx was NOT reloaded.");
	}

	return 1;
}

######### GENERAL FUNCTIONS #########

sub getCurrentDateTimeString
{
	my($sec,$min,$hour,$day,$mon,$year) = localtime;
	return sprintf("%.4d-%.2d-%.2d-%.2d-%.2d-%.2d",$year+=1900,$mon+=1,$day,$hour,$min,$sec);
}

#

sub fail { die RED . shift . RESET . "\nExiting.\n"; }

#

sub logger
{
	my($level,$msg,$noNewLine) = @_;
	($msg,$noNewLine) = @_ unless ( int($level) > 0 and int($level) > 0);
	if ($VERBOSITY >= $level)
	{
		print '#' x ($level-1) , "\t" x ($level-1) , $msg;
		print "\n" unless $noNewLine;
	}
}

__END__
